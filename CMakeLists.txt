cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)

set(ENABLE_CUDA ON CACHE BOOL "Enable CUDA modules")

if(${ENABLE_CUDA})
    find_package(CUDA REQUIRED)
endif(${ENABLE_CUDA})
find_package(OpenGL REQUIRED)
find_package(Qt5Core REQUIRED)
find_package(Qt5OpenGL REQUIRED)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

add_subdirectory(volume)
add_subdirectory(painter)

if(${ENABLE_CUDA})
    file(GLOB CUDA_SOURCES *.cuda.cu)
    file(GLOB CUDA_HEADERS *.cuda.h)
endif(${ENABLE_CUDA})

file(GLOB SOURCES *.cpp)
file(GLOB HEADERS *.h)
if(NOT ${ENABLE_CUDA})
    file(GLOB SOURCES_CUDA *cuda.cpp *raf.cpp)
    file(GLOB HEADERS_CUDA *cuda.h *raf.h)
    list(REMOVE_ITEM SOURCES ${SOURCES_CUDA})
    list(REMOVE_ITEM HEADERS ${HEADERS_CUDA})
endif(NOT ${ENABLE_CUDA})
file(GLOB SHADERS *.vert *.frag)
file(GLOB RESOURCE_FILES *.qrc)

add_subdirectory(image)
add_subdirectory(transferfunction)

if(${ENABLE_CUDA})
    add_definitions(-DENABLE_CUDA ${DEFINITIONS})
else(${ENABLE_CUDA})
    add_definitions(${DEFINITIONS})
endif(${ENABLE_CUDA})

if(${ENABLE_CUDA})
    cuda_add_library(volrencuda ${CUDA_SOURCES} ${CUDA_HEADERS})
    target_include_directories(volrencuda PUBLIC volume painter transferfunction image)
    target_link_libraries(volrencuda ${CUDA_LIBRARIES})
    qt5_use_modules(volrencuda Core OpenGL)
    set(VOLRENCUDA volrencuda)
endif(${ENABLE_CUDA})

qt5_add_resources(RESOURCES ${RESOURCE_FILES})
add_library(volren ${SOURCES} ${HEADERS} ${RESOURCES} ${SHADERS})
target_include_directories(volren PUBLIC volume painter transferfunction image)
target_link_libraries(volren ${OPENGL_LIBRARIES} volume painter ${VOLRENCUDA})
target_compile_features(volren PRIVATE cxx_range_for)
qt5_use_modules(volren Core OpenGL)
